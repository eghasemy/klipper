# Enhanced HTML Report Generation for Input Shaper Calibration
#
# Copyright (C) 2024 Dmitry Butyugin <dmbutyugin@google.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.
import json
import math
import os
import sys
from datetime import datetime

class ResonanceReportGenerator:
    def __init__(self, calibration_data, shaper_results, recommended_shaper=None):
        """
        Initialize the report generator with calibration data and results
        
        Args:
            calibration_data: CalibrationData object with frequency response
            shaper_results: List of CalibrationResult objects from shaper fitting
            recommended_shaper: The recommended shaper configuration
        """
        self.calibration_data = calibration_data
        self.shaper_results = shaper_results
        self.recommended_shaper = recommended_shaper
        self.analysis = calibration_data.get_comprehensive_analysis()
        
    def generate_html_report(self, output_path="resonance_report.html"):
        """Generate a comprehensive HTML report with interactive graphs"""
        html_content = self._build_html_structure()
        
        with open(output_path, 'w') as f:
            f.write(html_content)
        
        print(f"Comprehensive resonance report generated: {output_path}")
        return output_path
    
    def _build_html_structure(self):
        """Build the complete HTML structure"""
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Klipper Input Shaper Calibration Report</title>
    <script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>🔧 Klipper Input Shaper Calibration Report</h1>
            <p class="subtitle">Comprehensive analysis and recommendations for optimal print quality</p>
            <div class="timestamp">Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</div>
        </header>
        
        <div class="content">
            {self._build_executive_summary()}
            {self._build_frequency_analysis()}
            {self._build_shaper_comparison()}
            {self._build_recommendations()}
            {self._build_troubleshooting_guide()}
            {self._build_advanced_analysis()}
        </div>
        
        <footer class="footer">
            <p>Generated by Klipper Enhanced Input Shaper Calibration System</p>
        </footer>
    </div>
    
    <script>
        {self._get_javascript()}
    </script>
</body>
</html>"""
        return html
    
    def _get_css_styles(self):
        """Return CSS styles for the HTML report"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f8fafc;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 2rem;
            padding: 2rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-bottom: 1rem;
        }
        
        .timestamp {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .section {
            background: white;
            margin-bottom: 2rem;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .section h2 {
            color: #2d3748;
            font-size: 1.8rem;
            margin-bottom: 1rem;
            border-bottom: 3px solid #667eea;
            padding-bottom: 0.5rem;
        }
        
        .section h3 {
            color: #4a5568;
            font-size: 1.3rem;
            margin: 1.5rem 0 1rem 0;
        }
        
        .metric-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }
        
        .metric-card {
            background: #f7fafc;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #667eea;
        }
        
        .metric-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2d3748;
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: #718096;
            margin-top: 0.25rem;
        }
        
        .chart-container {
            margin: 1.5rem 0;
            background: white;
            border-radius: 8px;
            padding: 1rem;
        }
        
        .recommendation-card {
            background: #edf2f7;
            border: 1px solid #cbd5e0;
            border-radius: 8px;
            padding: 1.5rem;
            margin: 1rem 0;
        }
        
        .recommendation-header {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .recommendation-icon {
            font-size: 1.5rem;
            margin-right: 0.5rem;
        }
        
        .success { color: #38a169; }
        .warning { color: #d69e2e; }
        .error { color: #e53e3e; }
        .info { color: #3182ce; }
        
        .shaper-comparison {
            overflow-x: auto;
        }
        
        .shaper-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }
        
        .shaper-table th,
        .shaper-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .shaper-table th {
            background-color: #f7fafc;
            font-weight: 600;
            color: #2d3748;
        }
        
        .recommended-row {
            background-color: #f0fff4;
            border-left: 4px solid #38a169;
        }
        
        .problem-area {
            background-color: #fef5e7;
            border: 1px solid #fbd38d;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
        }
        
        .improvement-tip {
            background-color: #ebf8ff;
            border: 1px solid #90cdf4;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
        }
        
        .footer {
            text-align: center;
            margin-top: 2rem;
            padding: 1rem;
            color: #718096;
            font-size: 0.9rem;
        }
        
        .collapsible {
            cursor: pointer;
            user-select: none;
        }
        
        .collapsible:hover {
            background-color: #f7fafc;
        }
        
        .content-hidden {
            display: none;
        }
        """
    
    def _build_executive_summary(self):
        """Build the executive summary section"""
        analysis = self.analysis
        dominant_freq = analysis.get('dominant_frequency', 'N/A')
        max_amplitude = analysis.get('max_amplitude', 0)
        
        # Determine overall health
        if max_amplitude < 1000:
            health_status = "✅ Excellent"
            health_color = "success"
            health_desc = "Your printer shows very low vibrations. Input shaping will provide fine-tuning."
        elif max_amplitude < 5000:
            health_status = "🟡 Good"
            health_color = "warning"
            health_desc = "Moderate vibrations detected. Input shaping will significantly improve print quality."
        else:
            health_status = "🔴 Needs Attention"
            health_color = "error"
            health_desc = "High vibrations detected. Input shaping is essential for good print quality."
        
        recommended_name = self.recommended_shaper.name if self.recommended_shaper else "None"
        recommended_freq = self.recommended_shaper.freq if self.recommended_shaper else "N/A"
        
        return f"""
        <section class="section">
            <h2>📊 Executive Summary</h2>
            
            <div class="metric-grid">
                <div class="metric-card">
                    <div class="metric-value {health_color}">{health_status}</div>
                    <div class="metric-label">Overall Health</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{dominant_freq:.1f} Hz</div>
                    <div class="metric-label">Dominant Frequency</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{recommended_name}</div>
                    <div class="metric-label">Recommended Shaper</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{recommended_freq:.1f} Hz</div>
                    <div class="metric-label">Optimal Frequency</div>
                </div>
            </div>
            
            <div class="recommendation-card">
                <div class="recommendation-header">
                    <span class="recommendation-icon">💡</span>
                    <strong>Key Insight</strong>
                </div>
                <p>{health_desc}</p>
                {self._get_quick_recommendations()}
            </div>
        </section>
        """
    
    def _build_frequency_analysis(self):
        """Build the frequency response analysis section"""
        return f"""
        <section class="section">
            <h2>📈 Frequency Response Analysis</h2>
            
            <div class="chart-container">
                <div id="frequency-response-chart"></div>
            </div>
            
            <h3>🎯 Peak Frequencies Detected</h3>
            {self._build_peak_frequencies_table()}
            
            <h3>🔄 Cross-Axis Coupling Analysis</h3>
            {self._build_coupling_analysis()}
            
            <h3>🌊 Harmonic Analysis</h3>
            {self._build_harmonic_analysis()}
        </section>
        """
    
    def _build_shaper_comparison(self):
        """Build the shaper comparison section"""
        return f"""
        <section class="section">
            <h2>⚖️ Input Shaper Comparison</h2>
            
            <div class="chart-container">
                <div id="shaper-comparison-chart"></div>
            </div>
            
            <div class="shaper-comparison">
                {self._build_shaper_table()}
            </div>
            
            <h3>📊 Performance Metrics Explained</h3>
            <div class="improvement-tip">
                <p><strong>Vibration Reduction:</strong> Lower is better. Shows how much the shaper reduces problematic frequencies.</p>
                <p><strong>Smoothing:</strong> Higher values may affect print quality on corners and fine details.</p>
                <p><strong>Max Acceleration:</strong> Maximum recommended acceleration with this shaper for optimal results.</p>
            </div>
        </section>
        """
    
    def _build_recommendations(self):
        """Build the recommendations section"""
        return f"""
        <section class="section">
            <h2>🎯 Specific Recommendations</h2>
            
            {self._get_configuration_recommendations()}
            {self._get_mechanical_recommendations()}
            {self._get_tuning_recommendations()}
        </section>
        """
    
    def _build_troubleshooting_guide(self):
        """Build the troubleshooting guide section"""
        return f"""
        <section class="section">
            <h2>🔧 Troubleshooting Guide</h2>
            
            {self._get_common_issues()}
            {self._get_improvement_suggestions()}
        </section>
        """
    
    def _build_advanced_analysis(self):
        """Build the advanced analysis section"""
        return f"""
        <section class="section">
            <h2>🔬 Advanced Analysis</h2>
            
            <div class="chart-container">
                <div id="advanced-metrics-chart"></div>
            </div>
            
            {self._get_advanced_metrics()}
            {self._get_frequency_domain_insights()}
        </section>
        """
    
    def _get_quick_recommendations(self):
        """Generate quick recommendations based on analysis"""
        recommendations = []
        analysis = self.analysis
        
        if analysis.get('max_amplitude', 0) > 5000:
            recommendations.append("Consider tightening printer frame and belts")
        
        if len(analysis.get('peak_frequencies', [])) > 3:
            recommendations.append("Multiple resonances detected - mechanical inspection recommended")
        
        coupling = analysis.get('cross_coupling', {})
        if coupling.get('strength', 0) > 0.7:
            recommendations.append("Strong X-Y coupling detected - check frame rigidity")
        
        if not recommendations:
            recommendations.append("Your printer is well-calibrated! Fine-tune with the recommended shaper.")
        
        return "<ul>" + "".join([f"<li>{rec}</li>" for rec in recommendations]) + "</ul>"
    
    def _build_peak_frequencies_table(self):
        """Build a table of detected peak frequencies"""
        peaks = self.analysis.get('peak_frequencies', [])
        if not peaks:
            return "<p>No significant resonance peaks detected.</p>"
        
        # Get the numpy reference
        np = self.calibration_data.numpy
        freq_bins = self.calibration_data.freq_bins
        psd_sum = self.calibration_data.psd_sum
        
        table_rows = []
        for freq in peaks[:5]:  # Show top 5 peaks
            # Find amplitude at this frequency
            freq_idx = np.argmin(np.abs(freq_bins - freq))
            amplitude = psd_sum[freq_idx]
            
            # Categorize frequency range
            if freq < 20:
                category = "Low (Frame/Bed)"
            elif freq < 60:
                category = "Medium (Gantry)"
            else:
                category = "High (Toolhead/Belts)"
            
            table_rows.append(f"""
                <tr>
                    <td>{freq:.1f} Hz</td>
                    <td>{amplitude:.0f}</td>
                    <td>{category}</td>
                </tr>
            """)
        
        return f"""
        <table class="shaper-table">
            <thead>
                <tr>
                    <th>Frequency</th>
                    <th>Amplitude</th>
                    <th>Likely Source</th>
                </tr>
            </thead>
            <tbody>
                {''.join(table_rows)}
            </tbody>
        </table>
        """
    
    def _build_coupling_analysis(self):
        """Build cross-axis coupling analysis"""
        coupling = self.analysis.get('cross_coupling', {})
        strength = coupling.get('strength', 0)
        correlation = coupling.get('correlation', 0)
        
        if strength > 0.7:
            level = "🔴 High"
            description = "Strong coupling between X and Y axes detected. This suggests frame flexibility or belt tension issues."
        elif strength > 0.4:
            level = "🟡 Moderate"
            description = "Moderate coupling detected. Consider checking frame tightness and belt tension."
        else:
            level = "✅ Low"
            description = "Good axis isolation. Your frame is rigid and well-calibrated."
        
        return f"""
        <div class="metric-grid">
            <div class="metric-card">
                <div class="metric-value">{level}</div>
                <div class="metric-label">Coupling Level</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{strength:.2f}</div>
                <div class="metric-label">Coupling Strength</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{correlation:.2f}</div>
                <div class="metric-label">Correlation</div>
            </div>
        </div>
        <p>{description}</p>
        """
    
    def _build_harmonic_analysis(self):
        """Build harmonic analysis"""
        harmonics = self.analysis.get('harmonics', {})
        if not harmonics:
            return "<p>No significant harmonics detected.</p>"
        
        harmonic_info = []
        for fundamental, harmonic_data in list(harmonics.items())[:3]:  # Show top 3
            harmonic_count = len(harmonic_data)
            harmonic_info.append(f"<li>{fundamental:.1f} Hz fundamental with {harmonic_count} harmonics</li>")
        
        return f"""
        <ul>
            {''.join(harmonic_info)}
        </ul>
        <div class="improvement-tip">
            <strong>Harmonics indicate:</strong> Nonlinear mechanical behavior. Often caused by loose components or wear.
        </div>
        """
    
    def _build_shaper_table(self):
        """Build a comparison table of different shapers"""
        if not self.shaper_results:
            return "<p>No shaper results available.</p>"
        
        table_rows = []
        for result in self.shaper_results[:8]:  # Show top 8 results
            row_class = "recommended-row" if (self.recommended_shaper and 
                                            result.name == self.recommended_shaper.name and 
                                            abs(result.freq - self.recommended_shaper.freq) < 0.1) else ""
            
            icon = "🏆" if row_class else ""
            
            table_rows.append(f"""
                <tr class="{row_class}">
                    <td>{icon} {result.name}</td>
                    <td>{result.freq:.1f} Hz</td>
                    <td>{result.vibrs:.3f}</td>
                    <td>{result.smoothing:.2f}</td>
                    <td>{result.max_accel:.0f} mm/s²</td>
                    <td>{result.score:.1f}</td>
                </tr>
            """)
        
        return f"""
        <table class="shaper-table">
            <thead>
                <tr>
                    <th>Shaper Type</th>
                    <th>Frequency</th>
                    <th>Vibration Reduction</th>
                    <th>Smoothing</th>
                    <th>Max Acceleration</th>
                    <th>Score</th>
                </tr>
            </thead>
            <tbody>
                {''.join(table_rows)}
            </tbody>
        </table>
        """
    
    def _get_configuration_recommendations(self):
        """Get configuration recommendations"""
        if not self.recommended_shaper:
            return "<p>No shaper recommendations available.</p>"
        
        config_lines = [
            f"shaper_type = {self.recommended_shaper.name}",
            f"shaper_freq = {self.recommended_shaper.freq:.1f}",
        ]
        
        return f"""
        <h3>📝 Recommended Configuration</h3>
        <div class="recommendation-card">
            <div class="recommendation-header">
                <span class="recommendation-icon">⚙️</span>
                <strong>Add to your printer.cfg:</strong>
            </div>
            <pre style="background: #f1f5f9; padding: 1rem; border-radius: 4px; overflow-x: auto;">
[input_shaper]
{'<br>'.join(config_lines)}
</pre>
        </div>
        """
    
    def _get_mechanical_recommendations(self):
        """Get mechanical improvement recommendations"""
        analysis = self.analysis
        recommendations = []
        
        if analysis.get('max_amplitude', 0) > 3000:
            recommendations.append({
                'title': 'Frame Rigidity',
                'icon': '🔧',
                'description': 'High vibration amplitude suggests frame flexibility. Check all frame connections and consider reinforcement.'
            })
        
        coupling = analysis.get('cross_coupling', {})
        if coupling.get('strength', 0) > 0.6:
            recommendations.append({
                'title': 'Belt Tension',
                'icon': '🎚️',
                'description': 'Cross-axis coupling indicates uneven belt tension. Check and balance X/Y belt tensions.'
            })
        
        peaks = analysis.get('peak_frequencies', [])
        if len(peaks) > 4:
            recommendations.append({
                'title': 'Loose Components',
                'icon': '🔩',
                'description': 'Multiple resonance peaks suggest loose components. Inspect all bolts, pulleys, and bearings.'
            })
        
        if not recommendations:
            recommendations.append({
                'title': 'Well Calibrated',
                'icon': '✅',
                'description': 'Your printer shows good mechanical characteristics. Continue with regular maintenance.'
            })
        
        recommendation_cards = []
        for rec in recommendations:
            recommendation_cards.append(f"""
                <div class="recommendation-card">
                    <div class="recommendation-header">
                        <span class="recommendation-icon">{rec['icon']}</span>
                        <strong>{rec['title']}</strong>
                    </div>
                    <p>{rec['description']}</p>
                </div>
            """)
        
        return f"""
        <h3>🔨 Mechanical Improvements</h3>
        {''.join(recommendation_cards)}
        """
    
    def _get_tuning_recommendations(self):
        """Get tuning recommendations"""
        if not self.recommended_shaper:
            return ""
        
        max_accel = self.recommended_shaper.max_accel
        smoothing = self.recommended_shaper.smoothing
        
        accel_recommendation = "conservative (3000-5000 mm/s²)" if max_accel < 5000 else \
                              "moderate (5000-8000 mm/s²)" if max_accel < 8000 else "aggressive (8000+ mm/s²)"
        
        return f"""
        <h3>🎛️ Print Settings Recommendations</h3>
        <div class="metric-grid">
            <div class="metric-card">
                <div class="metric-value">{max_accel:.0f} mm/s²</div>
                <div class="metric-label">Max Acceleration</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{accel_recommendation}</div>
                <div class="metric-label">Acceleration Strategy</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{smoothing:.2f}</div>
                <div class="metric-label">Smoothing Factor</div>
            </div>
        </div>
        """
    
    def _get_common_issues(self):
        """Get common issues and solutions"""
        return """
        <h3>❓ Common Issues & Solutions</h3>
        
        <div class="problem-area">
            <strong>Problem:</strong> High vibrations at low frequencies (< 30 Hz)<br>
            <strong>Solution:</strong> Check frame rigidity, bed mounting, and printer placement on stable surface.
        </div>
        
        <div class="problem-area">
            <strong>Problem:</strong> Multiple resonance peaks<br>
            <strong>Solution:</strong> Systematic tightening of all bolts, check belt tension, inspect for wear.
        </div>
        
        <div class="problem-area">
            <strong>Problem:</strong> Input shaper not reducing ghosting<br>
            <strong>Solution:</strong> Re-run calibration, check accelerometer mounting, verify shaper configuration.
        </div>
        """
    
    def _get_improvement_suggestions(self):
        """Get specific improvement suggestions"""
        analysis = self.analysis
        suggestions = []
        
        dynamic_range = analysis.get('quality_metrics', {}).get('dynamic_range', 1)
        if dynamic_range < 10:
            suggestions.append("Low dynamic range in measurements - ensure accelerometer is properly mounted and printer is running during measurement")
        
        frequency_spread = analysis.get('frequency_spread', 0)
        if frequency_spread > 20:
            suggestions.append("Wide frequency spread indicates multiple vibration sources - consider systematic mechanical inspection")
        
        if not suggestions:
            suggestions.append("Your calibration data shows good quality - no immediate improvements needed")
        
        suggestion_items = [f"<li>{s}</li>" for s in suggestions]
        
        return f"""
        <h3>💡 Improvement Suggestions</h3>
        <div class="improvement-tip">
            <ul>
                {''.join(suggestion_items)}
            </ul>
        </div>
        """
    
    def _get_advanced_metrics(self):
        """Get advanced metrics display"""
        quality = self.analysis.get('quality_metrics', {})
        
        return f"""
        <div class="metric-grid">
            <div class="metric-card">
                <div class="metric-value">{quality.get('noise_floor', 0):.0f}</div>
                <div class="metric-label">Noise Floor</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{quality.get('dynamic_range', 0):.1f}</div>
                <div class="metric-label">Dynamic Range</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">{quality.get('frequency_resolution', 0):.2f} Hz</div>
                <div class="metric-label">Freq Resolution</div>
            </div>
        </div>
        """
    
    def _get_frequency_domain_insights(self):
        """Get frequency domain insights"""
        centroid = self.analysis.get('frequency_centroid', 0)
        
        if centroid < 30:
            insight = "Low-frequency dominated response suggests frame/bed resonances"
        elif centroid < 80:
            insight = "Mid-frequency response typical of gantry and belt systems"
        else:
            insight = "High-frequency response suggests toolhead or extruder vibrations"
        
        return f"""
        <h3>🎵 Frequency Domain Insights</h3>
        <div class="improvement-tip">
            <p><strong>Frequency Centroid:</strong> {centroid:.1f} Hz</p>
            <p><strong>Interpretation:</strong> {insight}</p>
        </div>
        """
    
    def _get_javascript(self):
        """Generate JavaScript for interactive charts"""
        # Prepare data for charts
        freq_data = self.calibration_data.freq_bins.tolist()
        psd_x_data = self.calibration_data.psd_x.tolist()
        psd_y_data = self.calibration_data.psd_y.tolist()
        psd_z_data = self.calibration_data.psd_z.tolist()
        psd_sum_data = self.calibration_data.psd_sum.tolist()
        
        # Prepare shaper comparison data
        shaper_names = [r.name for r in self.shaper_results[:8]] if self.shaper_results else []
        shaper_vibrations = [r.vibrs for r in self.shaper_results[:8]] if self.shaper_results else []
        shaper_smoothing = [r.smoothing for r in self.shaper_results[:8]] if self.shaper_results else []
        
        return f"""
        // Frequency Response Chart
        var freqData = {json.dumps(freq_data)};
        var psdXData = {json.dumps(psd_x_data)};
        var psdYData = {json.dumps(psd_y_data)};
        var psdZData = {json.dumps(psd_z_data)};
        var psdSumData = {json.dumps(psd_sum_data)};
        
        var freqTrace1 = {{
            x: freqData,
            y: psdXData,
            name: 'X Axis',
            type: 'scatter',
            line: {{color: '#ff6b6b'}}
        }};
        
        var freqTrace2 = {{
            x: freqData,
            y: psdYData,
            name: 'Y Axis',
            type: 'scatter',
            line: {{color: '#4ecdc4'}}
        }};
        
        var freqTrace3 = {{
            x: freqData,
            y: psdZData,
            name: 'Z Axis',
            type: 'scatter',
            line: {{color: '#45b7d1'}}
        }};
        
        var freqTrace4 = {{
            x: freqData,
            y: psdSumData,
            name: 'Combined',
            type: 'scatter',
            line: {{color: '#f39c12', width: 3}}
        }};
        
        var freqLayout = {{
            title: 'Frequency Response Analysis',
            xaxis: {{title: 'Frequency (Hz)'}},
            yaxis: {{title: 'Power Spectral Density', type: 'log'}},
            showlegend: true,
            hovermode: 'x unified'
        }};
        
        Plotly.newPlot('frequency-response-chart', [freqTrace1, freqTrace2, freqTrace3, freqTrace4], freqLayout);
        
        // Shaper Comparison Chart
        var shaperNames = {json.dumps(shaper_names)};
        var shaperVibrations = {json.dumps(shaper_vibrations)};
        var shaperSmoothing = {json.dumps(shaper_smoothing)};
        
        var shaperTrace1 = {{
            x: shaperNames,
            y: shaperVibrations,
            name: 'Vibration Reduction',
            type: 'bar',
            yaxis: 'y',
            marker: {{color: '#667eea'}}
        }};
        
        var shaperTrace2 = {{
            x: shaperNames,
            y: shaperSmoothing,
            name: 'Smoothing',
            type: 'scatter',
            mode: 'lines+markers',
            yaxis: 'y2',
            line: {{color: '#f093fb'}}
        }};
        
        var shaperLayout = {{
            title: 'Input Shaper Performance Comparison',
            xaxis: {{title: 'Shaper Type'}},
            yaxis: {{title: 'Vibration Reduction', side: 'left'}},
            yaxis2: {{title: 'Smoothing', side: 'right', overlaying: 'y'}},
            showlegend: true
        }};
        
        if (shaperNames.length > 0) {{
            Plotly.newPlot('shaper-comparison-chart', [shaperTrace1, shaperTrace2], shaperLayout);
        }}
        
        // Advanced Metrics Chart - Quality Indicators
        var qualityMetrics = ['Noise Floor', 'Dynamic Range', 'Frequency Resolution'];
        var qualityValues = [
            {self.analysis.get('quality_metrics', {}).get('noise_floor', 0)},
            {self.analysis.get('quality_metrics', {}).get('dynamic_range', 0)},
            {self.analysis.get('quality_metrics', {}).get('frequency_resolution', 0)}
        ];
        
        var qualityTrace = {{
            x: qualityMetrics,
            y: qualityValues,
            type: 'bar',
            marker: {{color: ['#ff9999', '#66b3ff', '#99ff99']}}
        }};
        
        var qualityLayout = {{
            title: 'Calibration Quality Metrics',
            xaxis: {{title: 'Metric'}},
            yaxis: {{title: 'Value'}}
        }};
        
        Plotly.newPlot('advanced-metrics-chart', [qualityTrace], qualityLayout);
        
        // Collapsible sections
        document.querySelectorAll('.collapsible').forEach(function(element) {{
            element.addEventListener('click', function() {{
                var content = this.nextElementSibling;
                content.classList.toggle('content-hidden');
            }});
        }});
        """